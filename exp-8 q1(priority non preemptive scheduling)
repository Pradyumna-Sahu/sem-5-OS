: '
Write a C program that stimulates the Priority Non Preemptive CPU scheduling algorithm and 
display the process turnaround time(TAT), average TAT, waiting time(WT), average WT.
'

#include <stdio.h>

struct Process {
    int pid, at, bt, pt;  // process id, arrival time, burst time, priority
    int st, ct, tat, wt, rt; // start time, completion time, turnaround, waiting, response
    int done;
};

int main() {
    int n, i, j, currentTime = 0, completed = 0;
    float totalTAT = 0, totalWT = 0;

    printf("Enter the number of process:- ");
    scanf("%d", &n);

    struct Process p[n];

    // Input
    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nEnter the process %d Arrival Time:- ", i + 1);
        scanf("%d", &p[i].at);
        printf("Enter the process %d Burst Time:- ", i + 1);
        scanf("%d", &p[i].bt);
        printf("Enter the priority %d Number:- ", i + 1);
        scanf("%d", &p[i].pt);
        p[i].done = 0;
    }

    printf("\nInputted Table is:-\n");
    printf("PID\tAT\tBT\tPriority\n");
    for (i = 0; i < n; i++) {
        printf("p[%d]\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].pt);
    }

    // Scheduling
    while (completed != n) {
        int idx = -1;
        int highestPriority = 9999;

        for (i = 0; i < n; i++) {
            if (p[i].at <= currentTime && p[i].done == 0) {
                if (p[i].pt < highestPriority) {
                    highestPriority = p[i].pt;
                    idx = i;
                } else if (p[i].pt == highestPriority) {
                    // Tie-breaker: earliest arrival
                    if (p[i].at < p[idx].at) {
                        idx = i;
                    }
                }
            }
        }

        if (idx != -1) {
            p[idx].st = currentTime;
            p[idx].ct = p[idx].st + p[idx].bt;
            p[idx].tat = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tat - p[idx].bt;
            p[idx].rt = p[idx].wt;  // For non-preemptive, RT = WT

            totalTAT += p[idx].tat;
            totalWT += p[idx].wt;

            currentTime = p[idx].ct;
            p[idx].done = 1;
            completed++;
        } else {
            currentTime++; // idle CPU
        }
    }

    printf("\nAfter calculation of CT, TAT, WT & RT the updated Table is :-\n");
    printf("PID\tAT\tBT\tPT\tST\tCT\tTAT\tWT\tRT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].pt,
               p[i].st, p[i].ct, p[i].tat, p[i].wt, p[i].rt);
    }

    printf("\nAverage TAT is: %.2f\t&\tAverage WT is: %.2f\n", 
           totalTAT / n, totalWT / n);

    return 0;
}

# OUTPUT 
: '
Enter the number of process:- 5

Enter the process 1 Arrival Time:- 0
Enter the process 1 Burst Time:- 3
Enter the priority 1 Number:- 2

Enter the process 2 Arrival Time:- 5
Enter the process 2 Burst Time:- 12
Enter the priority 2 Number:- 0

Enter the process 3 Arrival Time:- 12
Enter the process 3 Burst Time:- 2
Enter the priority 3 Number:- 3

Enter the process 4 Arrival Time:- 8
Enter the process 4 Burst Time:- 10
Enter the priority 4 Number:- 1

Enter the process 5 Arrival Time:- 9
Enter the process 5 Burst Time:- 16
Enter the priority 5 Number:- 1

Inputted Table is:-
PID	AT	BT	Priority
p[1]	0	3	2
p[2]	5	12	0
p[3]	12	2	3
p[4]	8	10	1
p[5]	9	16	1

After calculation of CT, TAT, WT & RT the updated Table is :-
PID	AT	BT	PT	ST	CT	TAT	WT	RT
1	0	3	2	0	3	3	0	0
2	5	12	0	5	17	12	0	0
3	12	2	3	43	45	33	31	31
4	8	10	1	17	27	19	9	9
5	9	16	1	27	43	34	18	18

Average TAT is: 20.20	&	Average WT is: 11.60
'
