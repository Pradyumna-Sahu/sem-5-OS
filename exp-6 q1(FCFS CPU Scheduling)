/*
Write a program that stimulates the FCFS CPU scheduling algorithm and display the process turnaround time (TAT) and average TAT, 
process response time (RT) and average RT, process waiting time (WT) and average WT.
Process    Arrival Time     Burst Time
P1    2    2
P2    0    1
P3    2    3
P4    3    5
P5    4    4
*/

#include <stdio.h>

int main() 
{
    int n, i, j;
    int pid[20], arrival[20], burst[20], comp[20], tat[20], wt[20], rt[20];
    int temp;
    float avg_tat = 0, avg_wt = 0, avg_rt = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for(i = 0; i < n; i++)
    {
        printf("\nEnter the arrival time of process %d: ", i+1);
        scanf("%d", &arrival[i]);
        printf("Enter the burst time of process %d: ", i+1);
        scanf("%d", &burst[i]);
        pid[i] = i+1;
    }

    // Print input
    printf("\nThe Input table is:\n");
    printf("P_ID    AT    BT\n");
    for(i = 0; i < n; i++)
    {
        printf("P[%d]    %d     %d\n", pid[i], arrival[i], burst[i]);
    }

    // Sort by Arrival Time (FCFS)
    for(i = 0; i < n; i++)
    {
        for(j = i+1; j < n; j++)
        {
            if(arrival[i] > arrival[j])
            {
                temp = arrival[i]; arrival[i] = arrival[j]; arrival[j] = temp;
                temp = burst[i]; burst[i] = burst[j]; burst[j] = temp;
                temp = pid[i]; pid[i] = pid[j]; pid[j] = temp;
            }
        }
    }

    printf("\nAfter sorting the updated table is:\n");
    printf("P_ID    AT    BT\n");
    for(i = 0; i < n; i++)
    {
        printf("P[%d]    %d     %d\n", pid[i], arrival[i], burst[i]);
    }

    // Calculate Completion Time
    int start_time;
    comp[0] = arrival[0] + burst[0];   // First process
    rt[0] = 0;                         // Response time = start - arrival = 0 for first
    for(i = 1; i < n; i++)
    {
        if(arrival[i] > comp[i-1])     // CPU idle
            comp[i] = arrival[i] + burst[i];
        else
            comp[i] = comp[i-1] + burst[i];
    }

    // Calculate TAT, WT, RT
    for(i = 0; i < n; i++)
    {
        tat[i] = comp[i] - arrival[i];     // Turnaround Time
        wt[i] = tat[i] - burst[i];         // Waiting Time

        if(i == 0)
            rt[i] = 0;
        else
            rt[i] = comp[i-1] - arrival[i]; // Response Time

        avg_tat += tat[i];
        avg_wt += wt[i];
        avg_rt += rt[i];
    }

    // Print final results
    printf("\nFinal Table:\n");
    printf("P_ID   AT   BT   CT   TAT   WT   RT\n");
    for(i = 0; i < n; i++)
    {
        printf("P[%d]   %d    %d    %d    %d     %d    %d\n", 
            pid[i], arrival[i], burst[i], comp[i], tat[i], wt[i], rt[i]);
    }

    printf("\nAverage TAT = %.2f", avg_tat/n);
    printf("\nAverage WT  = %.2f", avg_wt/n);
    printf("\nAverage RT  = %.2f\n", avg_rt/n);

    return 0;
}

# OUTPUT 
/*
Enter the number of processes: 5
Enter the arrival time of process 1: 2
Enter the burst time of process 1: 2
Enter the arrival time of process 2: 0
Enter the burst time of process 2: 1
Enter the arrival time of process 3: 2
Enter the burst time of process 3: 3
Enter the arrival time of process 4: 3
Enter the burst time of process 4: 5
Enter the arrival time of process 5: 4
Enter the burst time of process 5: 4
The Input table is:
P_ID    AT    BT
P[1]    2     2
P[2]    0     1
P[3]    2     3
P[4]    3     5
P[5]    4     4

After sorting the updated table is:
P_ID    AT    BT
P[2]    0     1
P[1]    2     2
P[3]    2     3
P[4]    3     5
P[5]    4     4

Final Table:
P_ID   AT   BT   CT   TAT   WT   RT
P[2]   0    1    1    1     0    0
P[1]   2    2    4    2     0    -1
P[3]   2    3    7    5     2    2
P[4]   3    5    12    9     4    4
P[5]   4    4    16    12     8    8

Average TAT = 5.80
Average WT  = 2.80
Average RT  = 2.60
*/
