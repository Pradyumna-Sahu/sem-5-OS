'''
Write a program that simulates the Round Robin CPU Scheduling algorithm and display the process 
turn around time(TAT), average TAT, waiting time(WT), average WT, Quantum Time = 2ms.
Process  Burst TIme  Arrival Time
P1  5  0
P2  6  1
P3  3  2
P4  1  3
P5  5  4 
P6  4  6
'''

#include <stdio.h>

void main() {
    int i, processes, sum = 0, y, q, wt = 0, tat = 0, rt_total = 0;
    int at[10], bt[10], temp[10], ct[10], rt[10];
    int first_exec[10]; // to record first CPU access
    float avg_waitt, avg_turnat, avg_rt;

    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    y = processes;

    for (i = 0; i < processes; i++) {
        printf("Enter Arrival Time for process %d: ", i + 1);
        scanf("%d", &at[i]);
        printf("Enter Burst Time for process %d: ", i + 1);
        scanf("%d", &bt[i]);
        temp[i] = bt[i];
        first_exec[i] = -1; // not yet started
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &q);

    // Round Robin Simulation
    for (sum = 0, i = 0; y != 0;) {
        if (temp[i] > 0 && at[i] <= sum) {
            // Record response time when process first gets CPU
            if (first_exec[i] == -1)
                first_exec[i] = sum - at[i];

            if (temp[i] <= q) {
                sum += temp[i];
                temp[i] = 0;
                ct[i] = sum;  // completion time
            } else {
                temp[i] -= q;
                sum += q;
            }

            if (temp[i] == 0) {
                y--;
            }
        } else if (at[i] > sum) {
            sum++;
            continue;
        }
        i = (i + 1) % processes;
    }

    printf("\nPID   AT   BT   CT   TAT  WT  RT\n");

    for (i = 0; i < processes; i++) {
        int tat_i = ct[i] - at[i];
        int wt_i = tat_i - bt[i];
        int rt_i = first_exec[i];

        printf("P%d    %d    %d    %d    %d    %d    %d\n",
               i + 1, at[i], bt[i], ct[i], tat_i, wt_i, rt_i);

        tat += tat_i;
        wt += wt_i;
        rt_total += rt_i;
    }

    avg_turnat = (float)tat / processes;
    avg_waitt = (float)wt / processes;
    avg_rt = (float)rt_total / processes;

    printf("\nAverage TAT: %.2f", avg_turnat);
    printf("\nAverage WT : %.2f", avg_waitt);
    printf("\nAverage RT : %.2f\n", avg_rt);
}


# OUTPUT 
'''
Enter Arrival Time for process 1: 0
Enter Burst Time for process 1: 5
Enter Arrival Time for process 2: 1
Enter Burst Time for process 2: 6
Enter Arrival Time for process 3: 2
Enter Burst Time for process 3: 3
Enter Arrival Time for process 4: 3
Enter Burst Time for process 4: 1
Enter Arrival Time for process 5: 4
Enter Burst Time for process 5: 5
Enter Arrival Time for process 6: 6
Enter Burst Time for process 6: 4
Enter Time Quantum: 2

PID   AT   BT   CT   TAT  WT  RT
P1    0    5    21    21    16    0
P2    1    6    23    22    16    1
P3    2    3    16    14    11    2
P4    3    1    7    4    3    3
P5    4    5    24    20    15    3
P6    6    4    20    14    10    3

Average TAT: 15.83
Average WT : 11.83
Average RT : 2.00
'''
